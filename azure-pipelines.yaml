trigger: none

pool:
  name: myAgent

variables:
  serviceConnection: 'mySC'
  azureLocation: 'East US 2'
  terraformWorkingDirectory: 'terraform/environments/test'
  storage_account_name: "tfstate2662823821"
  container_name: "tfstateproject3"
  key: "tfstate.azure.proj3.1"
  agentName: 'myAgent'

stages:
- stage: tfdeploy
  #condition: and(succeeded(), eq(variables['disableBuild'], 'false')) # Condition to disable the stage
  jobs:
    - job: PrepareInfrastructure
      pool:
        name: $(agentName)
      steps:
      - task: TerraformInstaller@1
        displayName: Install Terraform
        inputs:
          terraformVersion: 'latest'
      - task: TerraformTaskV4@4
        displayName: Init
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: $(terraformWorkingDirectory)
          backendServiceArm: $(serviceConnection)
          backendAzureRmResourceGroupName: 'Azuredevops'
          backendAzureRmStorageAccountName: $(storage_account_name)
          backendAzureRmContainerName: $(container_name)
          backendAzureRmKey: $(key)
      - task: TerraformTaskV4@4
        displayName: Plan
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceNameAzureRM: $(serviceConnection)
      - task: TerraformTaskV4@4
        displayName: Apply
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: $(terraformWorkingDirectory)
          environmentServiceNameAzureRM: $(serviceConnection)

- stage: Build
  #condition: and(succeeded(), eq(variables['disableBuild'], 'false')) # Condition to disable the stage
  jobs:
    - job: Build
      pool:
        name: $(agentName)
      steps:
      - task: ArchiveFiles@2
        displayName: 'Archive FakeRestAPI'
        inputs:
          rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
        displayName: 'Upload Package'
        artifact: drop-fakerestapi

- stage: Deploy
  #condition: and(succeeded(), eq(variables['disableBuild'], 'false'))
  jobs:
    - deployment: FakeRestAPI
      environment: 'test-env'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              displayName: 'Deploy Azure Web App'
              inputs:
                azureSubscription: $(serviceConnection)
                appName: 'MyAppService-AppService'
                appType: webApp
                package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
    - deployment: VirtualMachineDeploy
      #condition: and(succeeded(), eq(variables['disableBuild'], 'false'))
      displayName: Deploy the virtual Machine
      environment:
        name: 'test-env'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Bash@3
              displayName: Configure selenium
              inputs:
                targetType: 'inline'
                workingDirectory: '/home/myAdmin'
                script: |
                  #! /bin/bash
                  python -m pip install --upgrade pip
                  pip install selenium
                  pip install pytest
                  pip install pytest-html
                  pip install chromedriver-py==96.0.4664.18
                  pip install pytest-xdist
                  pip install pytest-nunit
                  python3 automatedtesting/selenium/login.py
- stage: Test
  jobs:
  - job: PostmanTests
    pool:
        name: $(agentName)
    displayName: Postman Tests
    steps:
    - task: Bash@3
      displayName: Install newman
      inputs:
        targetType: 'inline'
        script: |
          #! /bin/bash
          newman run automatedtesting/postman/Data\ Validation\ Test\ Suite.postman_collection.json -e automatedtesting/postman/Test\ Environment.postman_environment.json --reporters cli,junit --reporter-junit-export ValidationReport.xml
          newman run automatedtesting/postman/Regression\ Test\ Suite.postman_collection.json -e automatedtesting/postman/Test\ Environment.postman_environment.json --reporters cli,junit --reporter-junit-export RegressionReport.xml
    - task: PublishTestResults@2
      inputs:
        displayName: Publish Test Results
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/*Report.xml'
        mergeTestResults: true
  - job: SeleniumTests
    displayName: Selenium Tests
    steps:
    - task: Bash@3
      displayName: Install dependencies
      inputs:
        targetType: 'inline'
    - script: |
          #! /bin/bash
          python -m pip install --upgrade pip
          pip install selenium
          pip install pytest
          pip install pytest-html
          pip install pytest-xdist
          pip install pytest-nunit
    - script: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb
          sudo apt-get install -f
      displayName: 'Install Google Chrome'
    - script: |
        CHROME_DRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
        wget https://storage.googleapis.com/chrome-for-testing-public/114.0.5735.90/linux64/chrome-linux64.zip
        unzip chromedriver_linux64.zip
        sudo mv chrome-linux64/chromedriver /usr/local/bin/
      displayName: 'Install ChromeDriver'
    - script: |
        python test_suite.py | tee test_output.log
      displayName: 'Run Selenium tests'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: 'test_output.log'
        artifact: test-logs
        publishLocation: 'pipeline'
      displayName: 'Upload log file'