trigger: none

pool:
  name: myAgent

variables:
  serviceConnection: 'mySC'
  azureLocation: 'East US 2'
  terraformWorkingDirectory: 'terraform/environments/test'
  storage_account_name: "tfstate1781720245"
  container_name: "tfstate"
  key: "tfstate.azure.proj3"
  agentName: 'myAgent'

stages:
  - stage: TerraformInit
    jobs:
      - job: validate
        pool:
         name: $(agentName)
        continueOnError: false
        steps:
        - task: TerraformInstaller@1
          displayName: Install Terraform
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(terraformWorkingDirectory)
            backendServiceArm: 'mySC'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: '$(storage_account_name)'
            backendAzureRmContainerName: '$(container_name)'
            backendAzureRmKey: '$(key)'
        - task: TerraformTaskV4@4
          displayName: Validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
            workingDirectory: $(terraformWorkingDirectory)
  - stage: tfdeploy
    condition: succeeded('TerraformInit')
    dependsOn: TerraformInit
    jobs:
      - job: apply
        pool:
         name: $(agentName)      
        steps:
        - task: TerraformInstaller@1
          displayName: Install Terraform
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: $(terraformWorkingDirectory)
            backendServiceArm: 'mySC'
            backendAzureRmResourceGroupName: 'Azuredevops'
            backendAzureRmStorageAccountName: '$(storage_account_name)'
            backendAzureRmContainerName: '$(container_name)'
            backendAzureRmKey: '$(key)'
        - task: TerraformTaskV4@4
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: $(terraformWorkingDirectory)
            environmentServiceNameAzureRM: 'mySC'
        - task: TerraformTaskV4@4
          displayName: Apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: $(terraformWorkingDirectory)
            environmentServiceNameAzureRM: 'mySC'
  
